Spring Boot is one of the most elegant and powerful features for ensuring data integrity in your application. It uses annotations from the Jakarta Bean Validation API (formerly JSR 380) and integrates seamlessly with Spring Boot's request handling.

---

### üß© What Is Field-Level Validation?

Field-level validation means applying constraints directly to fields in your model or DTO classes. These constraints ensure that incoming data meets specific rules before it's processed or saved.

---

### üõ†Ô∏è Step-by-Step Example

#### 1. **Add Dependency**

In your `pom.xml`:

```xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-validation</artifactId>
</dependency>
```

#### 2. **Create a DTO with Validation Annotations**

```java
import jakarta.validation.constraints.*;

public class UserDTO {

    @NotBlank(message = "Name is required")
    private String name;

    @Email(message = "Email must be valid")
    private String email;

    @Size(min = 8, message = "Password must be at least 8 characters")
    private String password;

    // Getters and setters
}
```

#### 3. **Use `@Valid` in Controller**

```java
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/users")
public class UserController {

    @PostMapping
    public String createUser(@RequestBody @Valid UserDTO userDTO) {
        return "User created successfully!";
    }
}
```

Spring Boot will automatically validate the fields. If any constraint fails, it throws a `MethodArgumentNotValidException`.

---

### üßæ Handling Validation Errors Gracefully

```java
@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<Map<String, String>> handleValidationExceptions(MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getFieldErrors().forEach(error ->
            errors.put(error.getField(), error.getDefaultMessage()));
        return ResponseEntity.badRequest().body(errors);
    }
}
```

This gives a clean JSON response like:

```json
{
  "name": "Name is required",
  "email": "Email must be valid"
}
```

---

### üß† Common Validation Annotations

| Annotation      | Description                              |
|----------------|------------------------------------------|
| `@NotNull`      | Field must not be null                   |
| `@NotBlank`     | Must not be null or empty (for Strings)  |
| `@Email`        | Must be a valid email format             |
| `@Size(min, max)` | Length constraints                     |
| `@Min` / `@Max` | Numeric range                            |
| `@Pattern`      | Regex-based validation                   |

---

